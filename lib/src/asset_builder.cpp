#include "asset_builder.h"
#include <nlohmann/json.hpp>

using namespace nlohmann;
using namespace std;

#define ENUM_AND_STR(val) \
	{                     \
		#val, val         \
	}

static const std::unordered_map<std::string, DXGI_FORMAT> dxgi_to_str = {
	ENUM_AND_STR(DXGI_FORMAT_UNKNOWN),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G8X24_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_D32_FLOAT_S8X24_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_X32_TYPELESS_G8X24_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10A2_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10A2_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10A2_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R11G11B10_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_D32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R24G8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_D24_UNORM_S8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R24_UNORM_X8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_X24_TYPELESS_G8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R16_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R16_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_D16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R16_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8_SINT),
	ENUM_AND_STR(DXGI_FORMAT_A8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R1_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R9G9B9E5_SHAREDEXP),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_B8G8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_G8R8_G8B8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC1_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC1_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC1_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC2_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC2_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC2_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC3_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC3_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC3_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC4_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC4_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC4_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC5_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC5_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC5_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_B5G6R5_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B5G5R5A1_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8A8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8X8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8A8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8A8_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8X8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8X8_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC6H_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC6H_UF16),
	ENUM_AND_STR(DXGI_FORMAT_BC6H_SF16),
	ENUM_AND_STR(DXGI_FORMAT_BC7_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC7_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC7_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_AYUV),
	ENUM_AND_STR(DXGI_FORMAT_Y410),
	ENUM_AND_STR(DXGI_FORMAT_Y416),
	ENUM_AND_STR(DXGI_FORMAT_NV12),
	ENUM_AND_STR(DXGI_FORMAT_P010),
	ENUM_AND_STR(DXGI_FORMAT_P016),
	ENUM_AND_STR(DXGI_FORMAT_420_OPAQUE),
	ENUM_AND_STR(DXGI_FORMAT_YUY2),
	ENUM_AND_STR(DXGI_FORMAT_Y210),
	ENUM_AND_STR(DXGI_FORMAT_Y216),
	ENUM_AND_STR(DXGI_FORMAT_NV11),
	ENUM_AND_STR(DXGI_FORMAT_AI44),
	ENUM_AND_STR(DXGI_FORMAT_IA44),
	ENUM_AND_STR(DXGI_FORMAT_P8),
	ENUM_AND_STR(DXGI_FORMAT_A8P8),
	ENUM_AND_STR(DXGI_FORMAT_B4G4R4A4_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_P208),
	ENUM_AND_STR(DXGI_FORMAT_V208),
	ENUM_AND_STR(DXGI_FORMAT_V408),
	ENUM_AND_STR(DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE),
	ENUM_AND_STR(DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE),
	ENUM_AND_STR(DXGI_FORMAT_FORCE_UINT),
};

#define ENUM_AND_STR(val) \
	{                     \
		val, #val         \
	}

static const std::unordered_map<DXGI_FORMAT, std::string> str_to_format = {
	ENUM_AND_STR(DXGI_FORMAT_UNKNOWN),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32A32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32B32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16B16A16_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32G8X24_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_D32_FLOAT_S8X24_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_X32_TYPELESS_G8X24_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10A2_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10A2_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10A2_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R11G11B10_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8B8A8_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16G16_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R32_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_D32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_R32_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R32_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R24G8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_D24_UNORM_S8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R24_UNORM_X8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_X24_TYPELESS_G8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R16_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R16_FLOAT),
	ENUM_AND_STR(DXGI_FORMAT_D16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R16_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R16_SINT),
	ENUM_AND_STR(DXGI_FORMAT_R8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_R8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8_UINT),
	ENUM_AND_STR(DXGI_FORMAT_R8_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_R8_SINT),
	ENUM_AND_STR(DXGI_FORMAT_A8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R1_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R9G9B9E5_SHAREDEXP),
	ENUM_AND_STR(DXGI_FORMAT_R8G8_B8G8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_G8R8_G8B8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC1_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC1_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC1_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC2_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC2_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC2_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC3_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC3_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC3_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC4_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC4_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC4_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC5_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC5_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC5_SNORM),
	ENUM_AND_STR(DXGI_FORMAT_B5G6R5_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B5G5R5A1_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8A8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8X8_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8A8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8A8_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8X8_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_B8G8R8X8_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_BC6H_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC6H_UF16),
	ENUM_AND_STR(DXGI_FORMAT_BC6H_SF16),
	ENUM_AND_STR(DXGI_FORMAT_BC7_TYPELESS),
	ENUM_AND_STR(DXGI_FORMAT_BC7_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_BC7_UNORM_SRGB),
	ENUM_AND_STR(DXGI_FORMAT_AYUV),
	ENUM_AND_STR(DXGI_FORMAT_Y410),
	ENUM_AND_STR(DXGI_FORMAT_Y416),
	ENUM_AND_STR(DXGI_FORMAT_NV12),
	ENUM_AND_STR(DXGI_FORMAT_P010),
	ENUM_AND_STR(DXGI_FORMAT_P016),
	ENUM_AND_STR(DXGI_FORMAT_420_OPAQUE),
	ENUM_AND_STR(DXGI_FORMAT_YUY2),
	ENUM_AND_STR(DXGI_FORMAT_Y210),
	ENUM_AND_STR(DXGI_FORMAT_Y216),
	ENUM_AND_STR(DXGI_FORMAT_NV11),
	ENUM_AND_STR(DXGI_FORMAT_AI44),
	ENUM_AND_STR(DXGI_FORMAT_IA44),
	ENUM_AND_STR(DXGI_FORMAT_P8),
	ENUM_AND_STR(DXGI_FORMAT_A8P8),
	ENUM_AND_STR(DXGI_FORMAT_B4G4R4A4_UNORM),
	ENUM_AND_STR(DXGI_FORMAT_P208),
	ENUM_AND_STR(DXGI_FORMAT_V208),
	ENUM_AND_STR(DXGI_FORMAT_V408),
	ENUM_AND_STR(DXGI_FORMAT_SAMPLER_FEEDBACK_MIN_MIP_OPAQUE),
	ENUM_AND_STR(DXGI_FORMAT_SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE),
	ENUM_AND_STR(DXGI_FORMAT_FORCE_UINT),
};

DXGI_FORMAT dxgi_format_from_str(const std::string& str)
{
	auto it = dxgi_to_str.find(str);
	if (it != dxgi_to_str.end())
	{
		return it->second;
	}
	else
	{
		return DXGI_FORMAT_UNKNOWN;
	}
}

string dxgi_format_to_str(DXGI_FORMAT format)
{
	auto it = str_to_format.find(format);
	if (it != str_to_format.end())
	{
		return it->second;
	}
	else
	{
		return "DXGI_FORMAT_UNKNOWN";
	}
}

namespace ns
{
	void to_json(json& j, const tex_mapping& mapping)
	{
		j = json{ { "name", mapping.name },
			      { "regex", mapping.match_str },
			      { "dxgi-format-opaque", mapping.opaque_format_str },
			      { "dxgi-format-transparent", mapping.transparent_format_str } };
	}
	void from_json(const json& j, tex_mapping& tex_asset_type)
	{
		j.at("name").get_to(tex_asset_type.name);
		j.at("regex").get_to(tex_asset_type.match_str);

		tex_asset_type.match_regex = regex(tex_asset_type.match_str);

		j.at("dxgi-format-opaque").get_to(tex_asset_type.opaque_format_str);
		tex_asset_type.opaque_format = dxgi_format_from_str(tex_asset_type.opaque_format_str);

		j.at("dxgi-format-transparent").get_to(tex_asset_type.transparent_format_str);
		tex_asset_type.transparent_format =
			dxgi_format_from_str(tex_asset_type.transparent_format_str);
	}
}

void asset_builder::push(const std::filesystem::path& p)
{
	ifstream ifs(p);
	json     js        = json::parse(ifs);
	json     tex_types = js.at("tex-types");

	vector<ns::tex_mapping> m(tex_types.size());

	if (tex_types.is_array())
	{
		size_t i = 0;
		for_e(field, tex_types)
		{
			ns::tex_mapping tex_asset;
			string                  name = field.at("name");

			m[i] = field.get_to(tex_asset);
			i++;
		}
	}

	path_stack.push(p);
	tex_mapping_context_stack.push(m);
}

void asset_builder::pop() { path_stack.pop(); }

const std::filesystem::path& asset_builder::top() { return path_stack.top(); }

const std::string asset_builder::asset_type(const std::filesystem::path& p)
{
	const auto& current_level = tex_mapping_context_stack.top();
	for_e(entry, current_level)
	{
		if (regex_match(p.filename().string(), entry.match_regex))
		{
			return entry.name;
		}
	}
	return "unknown";
}

bool asset_builder::empty() { return path_stack.size() == 0; }
